#Hystrix 简介 断路器
#在微服务架构中，服务与服务之间通过远程调用的方式进行通信，一旦某个被调用的服务发生了故障，其依赖服务也会发生故障，此时就会发生故障的蔓延，最终导致系统瘫痪。
#Hystrix实现了断路器模式，当某个服务发生故障时，通过断路器的监控，给调用方返回一个错误响应，而不是长时间的等待，
#这样就不会使得调用方由于长时间得不到响应而占用线程，从而防止故障的蔓延。Hystrix具备服务降级、服务熔断、线程隔离、请求缓存、请求合并及服务监控等强大功能。

#@HystrixCommand详解
#@HystrixCommand中的常用参数
  #fallbackMethod：指定服务降级处理方法；
  #ignoreExceptions：忽略某些异常，不发生服务降级；
  #commandKey：命令名称，用于区分不同的命令；
  #groupKey：分组名称，Hystrix会根据不同的分组来统计命令的告警及仪表盘信息；
  #threadPoolKey：线程池名称，用于划分线程池。

#Hystrix的请求缓存
#当系统并发量越来越大时，我们需要使用缓存来优化系统，达到减轻并发请求线程数，提供响应速度的效果。
  #相关注解
  #@CacheResult：开启缓存，默认所有参数作为缓存的key，cacheKeyMethod可以通过返回String类型的方法指定key；
  #@CacheKey：指定缓存的key，可以指定参数或指定参数中的属性值为缓存key，cacheKeyMethod还可以通过返回String类型的方法指定；
  #@CacheRemove：移除缓存，需要指定commandKey。

  #缓存使用过程中的问题
  #在缓存使用过程中，我们需要在每次使用缓存的请求前后对HystrixRequestContext进行初始化和关闭，否则会出现如下异常
  #java.lang.IllegalStateException: Request caching is not available. Maybe you need to initialize the HystrixRequestContext? .....
  #这里我们通过使用过滤器，在每个请求前后初始化和关闭HystrixRequestContext来解决该问题:filter/HystrixRequestContextFilter

#请求合并
#微服务系统中的服务间通信，需要通过远程调用来实现，随着调用次数越来越多，占用线程资源也会越来越多。
#Hystrix中提供了@HystrixCollapser用于合并请求，从而达到减少通信消耗及线程数量的效果。
  #@HystrixCollapser的常用属性
#  batchMethod：用于设置请求合并的方法；
#  collapserProperties：请求合并属性，用于控制实例属性，有很多；
#  timerDelayInMilliseconds：collapserProperties中的属性，用于控制每隔多少时间合并一次请求；

#Hystrix的常用配置

#全局配置
#hystrix:
#  command: #用于控制HystrixCommand的行为
#    default:
#      execution:
#        isolation:
#          strategy: THREAD #控制HystrixCommand的隔离策略，THREAD->线程池隔离策略(默认)，SEMAPHORE->信号量隔离策略
#          thread:
#            timeoutInMilliseconds: 1000 #配置HystrixCommand执行的超时时间，执行超过该时间会进行服务降级处理
#            interruptOnTimeout: true #配置HystrixCommand执行超时的时候是否要中断
#            interruptOnCancel: true #配置HystrixCommand执行被取消的时候是否要中断
#          timeout:
#            enabled: true #配置HystrixCommand的执行是否启用超时时间
#          semaphore:
#            maxConcurrentRequests: 10 #当使用信号量隔离策略时，用来控制并发量的大小，超过该并发量的请求会被拒绝
#      fallback:
#        enabled: true #用于控制是否启用服务降级
#      circuitBreaker: #用于控制HystrixCircuitBreaker的行为
#        enabled: true #用于控制断路器是否跟踪健康状况以及熔断请求
#        requestVolumeThreshold: 20 #超过该请求数的请求会被拒绝
#        forceOpen: false #强制打开断路器，拒绝所有请求
#        forceClosed: false #强制关闭断路器，接收所有请求
#      requestCache:
#        enabled: true #用于控制是否开启请求缓存
#  collapser: #用于控制HystrixCollapser的执行行为
#    default:
#      maxRequestsInBatch: 100 #控制一次合并请求合并的最大请求数
#      timerDelayinMilliseconds: 10 #控制多少毫秒内的请求会被合并成一个
#      requestCache:
#        enabled: true #控制合并请求是否开启缓存
#  threadpool: #用于控制HystrixCommand执行所在线程池的行为
#    default:
#      coreSize: 10 #线程池的核心线程数
#      maximumSize: 10 #线程池的最大线程数，超过该线程数的请求会被拒绝
#      maxQueueSize: -1 #用于设置线程池的最大队列大小，-1采用SynchronousQueue，其他正数采用LinkedBlockingQueue
#      queueSizeRejectionThreshold: 5 #用于设置线程池队列的拒绝阀值，由于LinkedBlockingQueue不能动态改版大小，使用时需要用该参数来控制线程数

#实例配置
#实例配置只需要将全局配置中的default换成与之对应的key即可。
#hystrix:
#  command:
#    HystrixComandKey: #将default换成HystrixComrnandKey
#      execution:
#        isolation:
#          strategy: THREAD
#  collapser:
#    HystrixCollapserKey: #将default换成HystrixCollapserKey
#      maxRequestsInBatch: 100
#  threadpool:
#    HystrixThreadPoolKey: #将default换成HystrixThreadPoolKey
#      coreSize: 10

#配置文件中相关key的说明
#HystrixComandKey对应@HystrixCommand中的commandKey属性；
#HystrixCollapserKey对应@HystrixCollapser注解中的collapserKey属性；
#HystrixThreadPoolKey对应@HystrixCommand中的threadPoolKey属性。



server:
  port: 8401
spring:
  application:
    name: hystrix-service
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8001/eureka/
service-url:
  user-service: http://user-service
management:
  endpoints:
    web:
      exposure:
        include: 'hystrix.stream' #暴露hystrix监控端点