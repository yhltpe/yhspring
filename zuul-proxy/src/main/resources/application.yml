#https://mp.weixin.qq.com/s?__biz=MzU1Nzg4NjgyMw==&mid=2247484059&idx=1&sn=7124d74bb1f8b05589a13054dc680369&scene=21#wechat_redirect

#zuul:
# ignored-services: user-service,feign-service #关闭默认路由配置[如果不想使用默认的路由规则，可以添加以下配置来忽略默认路由配置]
# prefix: /proxy #给网关路由添加前缀[配置访问前缀]
# sensitive-headers: Cookie,Set-Cookie,Authorization #配置过滤敏感的请求头信息，设置为空就不会过滤
# add-host-header: true #设置为true重定向是会添加host请求头 [Zuul在请求路由时，不会设置最初的host头信息，该配置可以解决]

#查看路由信息
 #我们可以通过SpringBoot Actuator来查看Zuul中的路由信息。
 #
 #在pom.xml中添加相关依赖：
 #
 #<dependency>
 #    <groupId>org.springframework.boot</groupId>
 #    <artifactId>spring-boot-starter-actuator</artifactId>
 #</dependency>
 #修改application.yaml配置文件，开启查看路由的端点：
 #
 #management:
 #  endpoints:
 #    web:
 #      exposure:
 #        include: 'routes'
 #通过访问http://localhost:8801/actuator/routes查看简单路由信息：
 #通过访问http://localhost:8801/actuator/routes/details查看详细路由信息

#过滤器
  #路由与过滤是Zuul的两大核心功能，路由功能负责将外部请求转发到具体的服务实例上去，是实现统一访问入口的基础，过滤功能负责对请求过程进行额外的处理，是请求校验过滤及服务聚合的基础。
  #
  #过滤器类型
  #Zuul中有以下几种典型的过滤器类型。
    #pre：在请求被路由到目标服务前执行，比如权限校验、打印日志等功能；
    #routing：在请求被路由到目标服务时执行，这是使用Apache HttpClient或Netflix Ribbon构建和发送原始HTTP请求的地方；
    #post：在请求被路由到目标服务后执行，比如给目标服务的响应添加头信息，收集统计数据等功能；
    #error：请求在其他阶段发生错误时执行。

#Ribbon和Hystrix的支持
  #由于Zuul自动集成了Ribbon和Hystrix，所以Zuul天生就有负载均衡和服务容错能力，我们可以通过Ribbon和Hystrix的配置来配置Zuul中的相应功能。
  #  可以使用Hystrix的配置来设置路由转发时HystrixCommand的执行超时时间：
  #
  #  hystrix:
  #    command: #用于控制HystrixCommand的行为
  #      default:
  #        execution:
  #          isolation:
  #            thread:
  #              timeoutInMilliseconds: 1000 #配置HystrixCommand执行的超时时间，执行超过该时间会进行服务降级处理
  #  可以使用Ribbon的配置来设置路由转发时请求连接及处理的超时时间：
  #
  #  ribbon: #全局配置
  #    ConnectTimeout: 1000 #服务请求连接超时时间（毫秒）
  #    ReadTimeout: 3000 #服务请求处理超时时间（毫秒）

#  常用配置
#  zuul:
#    routes: #给服务配置路由
#      user-service:
#        path: /userService/**
#      feign-service:
#        path: /feignService/**
#    ignored-services: user-service,feign-service #关闭默认路由配置
#    prefix: /proxy #给网关路由添加前缀
#    sensitive-headers: Cookie,Set-Cookie,Authorization #配置过滤敏感的请求头信息，设置为空就不会过滤
#    add-host-header: true #设置为true重定向是会添加host请求头
#    retryable: true # 关闭重试机制
#    PreLogFilter:
#      pre:
#        disable: false #控制是否启用过滤器
#  使用到的模块
#  springcloud-learning
#  ├── eureka-server -- eureka注册中心
#  ├── user-service -- 提供User对象CRUD接口的服务
#  ├── feign-service -- feign服务调用测试服务
#  └── zuul-proxy -- zuul作为网关的测试服务

server:
  port: 8801
spring:
  application:
    name: zuul-proxy
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8001/eureka/
zuul:
  routes: #给服务配置路由
    user-service:
      path: /userService/**
    feign-service:
      path: /feignService/**
management:
  endpoints:
    web:
      exposure:
        include: 'routes'

